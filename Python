===== PYTHON FOR DATA SCIENCE (https://www.sololearn.com/certificates/CT-1XJAQMA3) =====
_____ Introduction _____

    Vaccinations Report
    We have a report on the number of flu vaccinations in a class of 20 people.
    It has the following numbers:
    never: 5
    once: 8
    twice: 4
    3 times: 3
    What is the mean number of times those people have been vaccinated?
    Output the result using the print() statement.
    Hint: Think about the data this way: it contains 20 values, each representing the number of vaccinations the corresponding person had.
        vac_nums = [0,0,0,0,0,
            1,1,1,1,1,1,1,1,
            2,2,2,2,
            3,3,3
            ]
        #your code goes here
        mean = sum(vac_nums) / len(vac_nums)
        print(mean)
        
    Vaccinations Dataset
    Using the same vaccinations dataset, which includes the number of times people got the flu vaccine.
    The dataset contains the following numbers:
    never: 5
    once: 8
    twice: 4
    3 times: 3
    Calculate and output the variance.
    We will soon learn about easier ways to calculate the variance and other summary statistics using Python. For now, use Python code to calculate the result using the corresponding equation.
    Hint: The variance is the average of the squared differences from the mean.
        vac_nums = [0,0,0,0,0,
            1,1,1,1,1,1,1,1,
            2,2,2,2,
            3,3,3
            ]
        #your code goes here
        def variance(data):
            # Mean of the data
            mean = sum(data) / len(data)
            # Square deviations
            deviations = [(x - mean) ** 2 for x in data]
            # Variance
            variance = sum(deviations) / n
            return variance
        print(variance(vac_nums))
        
_____ Math Operations With NumPy _____

    Houses On The Block
    You are given an array that holds the square footage data for houses on a particular street.
    A new house has just been constructed on that street.
    Modify your program to take the new house value as input, add it to the array, and output the array sorted in ascending order.
    Use the print statement to output the array object.
        import numpy as np
        data = np.array([1000, 2500, 1400, 1800, 900, 4200, 2200, 1900, 3500])
        data = np.append(data,int(input()))
        data = np.sort(data)
        print(data)
        
    Take Your Seat
    You are given an array that represents the occupancy of seats in a movie theater. A seat marked with 1 is occupied, while one marked 0 means the seat is free.
    However, the array is flat and 1-dimensional. Transform it into a 2-dimensional array, representing the rows of the seats.
    Each row in the theater has 5 seats and there are a total of 30 seats.
    Reshape the array into the corresponding shape and output the row at the given index, which is taken from user input.
    The row index is taken from user input in the given code.
    import numpy as np
    data = np.array([1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0])
    row = int(input())
    data = data.reshape(6,5)
    print(data[row])
    
    Array of Numbers
    You are given a task to find all of the whole numbers below 100 that are multiples of both 3 and 5.
    Create an array of numbers below 100 that are multiples of both 3 and 5, and output it.
    You can use the modulo operator % to check if a number is a multiple of another number.
        import numpy as np
        data = np.arange(1, 100)
        data = data[(data%3 == 0) & (data%5 == 0)]
        print(data)
        
    Infection Cases
    The given array represents the daily number of infections for 30 days.
    Find out how many days exceeded the average number of infections.
    Create the condition and output the size of the resulting array.
        import numpy as np
        data = np.array([120, 98, 150, 65, 42, 100, 190, 220, 140, 110, 88, 89, 100, 120, 50, 180, 155, 42, 89, 77, 200, 190, 125, 98, 77, 40, 39, 59, 30, 67])
        mean = np.mean(data)
        counter = 0
        for i in data:
            if i>mean:
                counter += 1
        print(counter)
        
    House Prices (PROJECT)
    You are given an array that represents house prices.
    Calculate and output the percentage of houses that are within one standard deviation from the mean.
    To calculate the percentage, divide the number of houses that satisfy the condition by the total number of houses, and multiply the result by 100.
        import numpy as np
        data = np.array([150000, 125000, 320000, 540000, 200000, 120000, 160000, 230000, 280000, 290000, 300000, 500000, 420000, 100000, 150000, 280000])
        mean = np.mean(data)
        std = np.std(data)
        low = mean - std
        high = mean + std
        print(len(data[(low < data) & (data < high)]) / len(data) * 100)
        
_____ Data Manipulation With Pandas _____

Locating Contacts
    You are given a dictionary that contains names and numbers of people.
    You need to create a DataFrame from the dictionary and add an index to it, which should be the name values.
    Then take a name from user input and output the row in the DataFrame, which corresponds to that row.
        import pandas as pd
        data = {
            'name': ['James', 'Billy', 'Bob', 'Amy', 'Tom'],
            'number': ['1234', '5678', '2222', '1111', '0909']
        }
        df = pd.DataFrame(data, index = ["James", "Billy", "Bob", "Amy", "Tom"])
        name = input()
        print(df.loc[name])

    Names and Ranks
    You are given a DataFrame that includes the names and ranks of people.
    You need to take a rank as input and output the corresponding name column from the DataFrame as a Series.
    Note that the rank is an integer, so you need to convert the user input to an integer.
        import pandas as pd
        data = {
             'name': ['James', 'Billy', 'Bob', 'Amy', 'Tom', 'Harry'],
             'rank': [4, 1, 3, 5, 2, 6]
        }
        df = pd.DataFrame(data, index=data['name'])
        userrank = int(input())
        print(df["name"][df["rank"] == userrank])
        
    Cases and Deaths
    You are working with the 'ca-covid' CSV file that contains the COVID-19 infection data in California for the year 2020.
    The file provides data on daily cases and deaths for the entire year.
    Find and output the row that corresponds to December 31, 2020.
    The requested date is the last row in the dataset, so you can use indexing to select it.
        import pandas as pd
        df = pd.read_csv("/usercode/files/ca-covid.csv")
        df.set_index('date', inplace=True)
        df.drop('state', axis=1, inplace=True)
        print(df.iloc[-1])

    Day of The Week
    You continue working with the COVID dataset for California.
    Now, add the weekday names for each row as a new column, named 'weekday'.
    Then, output the last 7 days data of the dataset.
    Do not set any index on the DataFrame.
    The given code converts the date column to datetime, so you do not need to change its format.
    Use the .dt.strftime("%A") function on the date column to convert it into a weekday name.
        import pandas as pd
        df = pd.read_csv("/usercode/files/ca-covid.csv")
        df.drop('state', axis=1, inplace=True)
        df['date'] = pd.to_datetime(df['date'], format="%d.%m.%y")
        df['weekday'] = df['date'].dt.strftime("%A")
        print(df[-7:])

    Number of Cases
    Given the COVID data, find the day with maximum cases in a given month.
    Take a month name as input and output the row that corresponds to the day with the maximum number of cases in that month.
    You can filter the DataFrame for the given month first, and then select the row with the maximum cases.
    Important: The output should be a DataFrame, which includes all the columns.
    For example, for the month of February, the expected result would be:
        cases deaths month
        date
        2020-02-26 15 0 February 
    The given code adds a month column to the dataset, and adds an index. Do not change that part of the code.
        import pandas as pd
        df = pd.read_csv("/usercode/files/ca-covid.csv")
        df.drop('state', axis=1, inplace=True)
        df['date'] = pd.to_datetime(df['date'], format="%d.%m.%y")
        df['month'] = df['date'].dt.month_name()
        df.set_index('date', inplace=True)
        monthuser = input()
        maxim = df[df["month"]==monthuser]['cases'].max()
        print(df[df['cases']==maxim])
        
    COVID Data Analysis (PROJECT)
    You are working with the COVID dataset for California, which includes the number of cases and deaths for each day of 2020.
    Find the day when the deaths/cases ratio was largest.
    To do this, you need to first calculate the deaths/cases ratio and add it as a column to the DataFrame with the name 'ratio', then find the row that corresponds to the largest value.
    Important: The output should be a DataFrame, containing all of the columns of the dataset for the corresponding row.
        import pandas as pd
        df = pd.read_csv("/usercode/files/ca-covid.csv")
        df.drop('state', axis=1, inplace=True)
        df.set_index('date', inplace=True)
        df['ratio'] = df['deaths'] / df['cases']
        print (df[df['ratio'] == df['ratio'].max()])

===== PYTHON CORE (https://www.sololearn.com/certificates/CT-YRMUP5CS) =====
_____ Basic Concepts _____

    Your First Program
    Write a program to print "Python is fun".
    Note that the sentence starts with a capital letter.
    Hint
    Use print() function.
    Remember to enclose the text into single or double quotes.
        #output "Python is fun"
        print("Python is fun")

    Brain Freeze!
    Today is a holiday at the children's camp, so all the children will be served ice cream.
    There are 68 children in the group, and each child should get 2 scoops of ice cream.
    Task
    Write a program to calculate and output the total number of ice cream scoops we need.
    Use the multiplication operator * inside the print() function.
        #your code goes here
        print(68*2)
        
    How Many Miles?
    Calculate and output the number of miles in 1000 kilometers.
    Hint
    One mile is 1.6 kilometers, so find the quotient of 1000 and 1.6.
    Use the floor division operator //.
        #your code goes 
        print(1000//1.6)

    Exponentiation (PROJECT)
    Task:
    Write a program to calculate the amount that will result from the doubling to understand which choice results in a larger amount.
    Hint:
    Let's see how exponentiation can be useful to perform the calculation.
    For example, if we want to calculate how much money we will have on the 5th day, we can use this expression: 0.01*(2**5) = 0.32 dollars (multiply the penny by 2 raised to the power of 5).
    Use the print statement to output the resulting amount.
        # your code goes here
        print(0.01*(2**30))
        
 _____ Strings & Variables _____
 
    I Code
    Fix the given code to output I'm a programmer.
    Hint
    Escape the single quote inside the string.
    Use backslash \ for escaping.
        print('I\'m a programmer')
        
    More Lines, More Better
    Working with strings is an essential programming skill.
    Task
    The given code outputs A B C D (each letter is separated by a space).
    A
    B
    C
    D
    You can use either \n or three quotes to add new lines inside the given string.
        print('A\nB\nC\nD')
    
    String Operations
    The provided code outputs the string "ni".
        print("ni")
    Task:
    Modify the code to output the string repeated 3 times, and add an ! (exclamation mark) at the end of the output.
    Remember, you can concatenate strings using the + operator.
        print("ni"*3+"!")
    
    Fun With Exponents
    The provided code stores the value 7 in a variable, and outputs it.
    Task
    Change the code to output the value of the variable raised to the power of 3.
    Exponentiation can be used to raise a number to the power of another.
        x = 7 ** 3
        print(x)
        
    Multiple Variables
    You can use multiple variables to take multiple inputs for your program.
    For example, the following code takes two inputs and stores them in the variables x and y:
        x = input()
        y = input()
    Task:
    Given the code above, output the input x repeated y times.
    Sample Input:
    awesome
    3
    Sample Output:
    awesomeawesomeawesome
    Remember, the input() function results in a string. You need to convert the result into the corresponding type, if you need to use it as a number.
        x = input()
        y = int(input())
        print(x*y)

    Simple Calculator (PROJECT)
    Write a program to take two integers as input and output their sum.
    Sample Input:
    2
    8
    Sample Output:
    10
    Remember, input() results in a string.
        # your code goes here
        x = int(input())
        y = int(input())
        print(x + y)

_____ Control Structures _____

    At Boiling Point
    Write a program that checks if the water is boiling.
    Take the integer temperature in Celsius as input and output "Boiling" if the temperature is above or equal to 100.
    Sample Input
    105
    Sample Output
    Boiling
    Do not output anything if the water is not boiling.
        temp = int(input())
        # your code goes here
        if temp >= 100:
            print("Boiling")
    
    Club Bouncer Code
    Write a program to control entrance to a club.
    Only people who are 18 or older are allowed to enter the club.
    The given program takes the age and the name of the person who tries to enter. Complete the program to output "Welcome" followed by the name of the person if they are allowed to enter the club, and "Sorry" if they are younger than the allowed age.
    Sample Input
    24
    James
        age = int(input())
        name = input()
        # your code goes here
        if age >= 18:
            print("Welcome " + name)
        else:
            print("Sorry")

    Humidity Level
    The comfortable relative humidity for humans is between 40% and 60%.
    The given program takes the percent of humidity as input.
    Task
    Complete the code to output "norm" if the taken percent of humidity is in the range of 40 and 60 inclusive.
    Don't output anything otherwise.
    Sample Input
    45
    Sample Output
    norm
    Use the and operator to chain the conditions in the if statement.
        humidity = int(input())
        #your code goes here
        if humidity >= 40 and humidity <= 60:
            print("norm")
            
    Financial Transactions
    Using an ATM, customers can access their bank deposits or credit accounts to do a variety of financial transactions.
    You serve ATMs that accept only Visa and Amex bank cards.
    The given program takes the type of a bank card as input.
    Task
    Complete the program to output "accepted" if the card is Visa or Amex.
    Don't output anything otherwise.
    Sample Input
    Amex
    Sample Output
    accepted
    Use the or operator in the if statement to handle the conditions properly.
        type = input()
        #your code goes here
        if type == "Amex" or type == "Visa":
            print("accepted")

    Fruit Vending Machine
    Imagine a vending machine that sells fruits. Each fruit has its own number, starting from 0.
    Write a program for the vending machine, which will take n number as input from the customer and return the fruit with that index.
        fruits = ["apple", "cherry", "banana", "kiwi", "lemon", "pear", "peach", "avocado"] 
    If n< 0 or n>7 (the index of last fruit ), the program outputs "Wrong number".
    Sample Input:
    2
    Sample Output:
    banana
    Remember that the first element of the list has 0 index.
        fruits = ["apple", "cherry", "banana", "kiwi", "lemon", "pear", "peach", "avocado"]
        num = int(input())
        #your code goes here
        if num < 0 or num > 7:
            print("Wrong number")
        else:
            print(fruits[num])

    Bingo
    Given a list of numbers, output "bingo" if it contains the input number.
    Do not output anything if the number is not found
        items = [42, 88, 721, 12, 43, 22, 908]
        num = int(input())
        #your code goes here
        if num in items:
            print("bingo")
    
    The Middle Element
    Given a list, calculate the middle element's index.
    You can use the len() function to get the number of elements in the list and then floor divide it by 2 using two slashes (//).
        items = [2, 4, 6, 8, 10, 12, 14]
        #your code goes here
        print((len(items))//2)
    
    Let's Do Some Magic
    You have a magic box that doubles the count of items you put, in every day.
    The given program takes the initial count of the items and the number of days as input.
    Task
    Write a program to calculate and output items' count on the last day.
    Sample Input
    3
    2
    Sample Output
    12
    Explanation
    Day 1: 6 (3*2)
    Day 2: 12 (6*2)
    Use *= operator to multiply the count of the items by 2 in each iteration.
        items = int(input())
        days = int(input())
        #your code goes here
        while days > 0:
            items *= 2
            days -= 1
        print(items)
        
    Iteration
    for loops allow you to easily iterate through lists.
    Given a list of numbers, output their sum.
    Sample Input
    1 3 7 5
    Sample Output
    16
    Output the sum after the loop.
        list = [1, 2, 3, 4, 5, 6, 7, 8, 9]
        sum = 0
        #your code goes here
        for i in list:
            sum += i
        print(sum)
        
    Date Picker
    You are making a date picker for a website and need to output all the years in a given period.
    Write a program that takes two integers as input and outputs the range of numbers between the two inputs as a list.
    The output sequence should start with the first input number and end with the second input number, without including it.
    Sample Input
    2005
    2011
    Sample Output
    [2005, 2006, 2007, 2008, 2009, 2010]
    You can convert a range object to a list and output it.
        a = int(input())
        b = int(input())
        #your code goes here
        print(list(range(a,b)))

    FizzBuzz (PROJECT)
    FizzBuzz is a well known programming assignment, asked during interviews.
    The given code solves the FizzBuzz problem and uses the words "Solo" and "Learn" instead of "Fizz" and "Buzz".
    It takes an input n and outputs the numbers from 1 to n.
    For each multiple of 3, print "Solo" instead of the number.
    For each multiple of 5, prints "Learn" instead of the number.
    For numbers which are multiples of both 3 and 5, output "SoloLearn".
    You need to change the code to skip the even numbers, so that the logic only applies to odd numbers in the range.
    Remember, the continue statement can be used to skip a loop iteration.
        n = int(input())
        for x in range(1, n,2):
            if x % 3 == 0 and x % 5 == 0:
                print("SoloLearn")
            elif x % 3 == 0:
                print("Solo")
            elif x % 5 == 0:
                print("Learn")
            else:
                print(x)

_____ Functions & Modules _____

    Welcome, SoloLearner!
    We have a function that outputs "Welcome, user" as it is called. We want to make it more personalized, so redesign the given function so that it will take the given input as the name of the user and output the welcome message with it.
    Sample Input
    Tommy
    Sample Output
    Welcome, Tommy
    Don't forget to call the function.
        def welcome_message():
            #redesign this function
            name = input()
            print("Welcome, " + name)
        welcome_message()

    Matching Passwords
    You are given a program with two inputs: one as password and the second one as password repeat. Complete and call the given function to output "Correct" if password and repeat are equal, and output "Wrong", if they are not.
    Sample Input
    nfs1598
    nfs1598
    Sample Output
    Correct
    Don't forget to add arguments when you call the function.
        password = input()
        repeat = input()
        def validate(text1, text2):
            #your code goes here
            if text1 == text2:
                print("Correct")
            else:
                print("Wrong")    
        validate(password, repeat)

    Hashtag Generator
    We are creating our own social network application and need to have a hashtag generator program.
    Complete the program to output the input text starting with the hashtag (#).
    Also, if the user entered several words, the program should delete the spaces between them.
    Sample Input
    code sleep eat repeat
    Sample Output
    #codesleepeatrepeat
    Hint
    You can use the replace() function to replace the spaces (" ") with empty strings (""). See how it works:
    s = "I like pears"
    s1 = s.replace("pears", "apricots")
    print(s1)
    #prints I like apricots
        s = input()
        def hashtagGen(text):
            #your code goes here
            taggy = "#" + text.replace(" ", "")
            return taggy
        print(hashtagGen(s))

    No Dice? No Problem
    Two friends want to play backgammon, but have lost the dice.
    Create a program to replace the dice. When the program is run, it should roll the dice and output the result of each die.
    Hint
    Use random.randint() function to generate random values in the range of 1 to 6 for each dice.
    You will see a random.seed(int(input())) line in sample code. It initializes the pseudorandom number generator and, in this case, ensures functionality of test cases.
        import random
        random.seed(int(input())) #please don't touch this lane
        #generate the random values for every dice
        dice1 = random.randint(1,6)
        dice2 = random.randint(1,6)
        print(dice1)
        print(dice2)

    Celcius To Farenheit Converter (PROJECT)
    You are making a Celsius to Fahrenheit converter.
    Write a function to take the Celsius value as an argument and return the corresponding Fahrenheit value.
    Sample Input
    36
    Sample Output
    96.8
    The following equation is used to calculate the Fahrenheit value: 9/5 * celsius + 32
        celsius = int(input())
        def conv(c):
            #your code goes here
            return (9/5) * c + 32
        fahrenheit = conv(celsius)
        print(fahrenheit)

_____ Exceptions & Files _____

    Bank Card PIN System
    We need to create a program that allows users to create their own PIN codes for their bank cards. Each PIN code consists of digits. Complete the program so that when the user enters a character, the program stops and outputs "Please enter a number" and when the user enters only digits, the program outputs "PIN code is created".
    Sample Input
    44a5
    Sample Output
    Please enter a number
    Recall int() function, that occurs an error when the argument is not a number.
        pin = input()
        try:
            #your code goes here
            int(pin)
            print("PIN code is created")
        except ValueError:
            #and here
            print("Please enter a number")
            
    Making Coffee
    A coffee vending machine makes 5 types of coffee:
        coffee = ["Café Latte", "Caffe Americano", "Espresso", "Cappuccino", "Macchiato"] 
    Each coffee option has its own number, starting with 0. Write a program that will take a number from the customer as input from the customer and serve the corresponding coffee type. If the customer enters a number that is out of the accepted range, the program should output "Invalid number". Regardless of coffee option result, the program should output "Have a good day" at the end.
    Sample Input
    7
    Sample Output
    Invalid number
    Have a good day
    Remember, that the first element of the list has 0 index.
        coffee = ["Café Latte", "Caffe Americano", "Espresso", "Cappuccino", "Macchiato"]
        choice = int(input())
        try:
            #your code goes here
            print(coffee[choice])
        except:
            #and here
            print("Invalid number")
        finally:
            #and finally here
            print("Have a good day")
            
    Getting In Shape
    Tom has done pull ups every day and recorded his results. He recorded each day's results in a new line, so that each line represents each day he has done pull ups.
    Create a program that takes n number as input and outputs the n-th days result (starting from 0).
    Sample Input
    4
    Sample Output
    Day 4, 9 pull ups
    Recall the readlines() function that returns a list containing each line in the file as a list item.
        file = open("/usercode/files/pull_ups.txt")
        n = int(input())
        #your code goes here
        list = file.readlines()
        print(list[n])
        file.close()

    New Lines
    You are given the following list:
        names = ["John", "Oscar", "Jacob"] 
    Complete the program to create a file where you write the names from the list, each on a new line, and separately output them.
    Output
    John
    Oscar
    Jacob
    Remember that "\n" represents a new line.
        names = ["John", "Oscar", "Jacob"]
        file = open("names.txt", "w+")
        #write down the names into the file
        for i in names:
            file.write(i + "\n")
        file.close()
        file= open("names.txt", "r")
        #output the content of file in console
        print(file.read())
        file.close()
        
    Book Titles (PROJECT)
    You have been asked to make a special book categorization program, which assigns each book a special code based on its title.
    The code is equal to the first letter of the book, followed by the number of characters in the title.
    For example, for the book "Harry Potter", the code would be: H12, as it contains 12 characters (including the space).
    You are provided a books.txt file, which includes the book titles, each one written on a separate line.
    Read the title one by one and output the code for each book on a separate line.
    For example, if the books.txt file contains:
    Some book
    Another book
    Your program should output:
    S9
    A12
    Recall the readlines() method, which returns a list containing the lines of the file.
    Also, remember that all lines, except the last one, contain a \n at the end, which should not be included in the character count.
        file = open("/usercode/files/books.txt", "r")
        for line in file:
            if line[-1] == "\n":
                print(line[0] + str(len(line)-1))
            else:
                print(line[0] + str(len(line)))
        #your code goes here
        file.close()
        
_____ More Types _____

    Inventory Manager
    Dictionaries can be used to store key:value pairs.
    You have been asked to create an inventory management program for a store. You use a dictionary to track all of the store's inventory along with how many of each item the store has.
        store = {"Orange": 2, "Watermelon": 0, "Apple": 8, "Banana": 42} 
    Complete the provided code to output the number of apples present in the store.
    Dictionaries can be indexed just like lists, using square brackets
        store = {"Orange": 2, "Watermelon": 0, "Apple": 8, "Banana": 42}
        #your code goes here
        print(store["Apple"])

    Where's The Book?
    You can use the .get() method to find keys in a dictionary, and use a second parameter to return a default value, in case the key is not found.
    Rewrite the given code to use the .get() method instead of the if/else statements.
    Also, change the output to "Book not found", when the book is not found.
    Note how much shorter the resulting code is, compared to the if/else statement.
        books = {
            "Life of Pi": "Adventure Fiction", 
            "The Three Musketeers": "Historical Adventure",
            "Watchmen": "Comics", 
            "Bird Box": "Horror",
            "Harry Potter":"Fantasy Fiction",
            "Good Omens": "Comedy"
        }
        book = input()
        print(books.get(book, "Book not found"))
        
    Tuples
    You are given coordinates of 2 points and need to find the straight line distance between them.
    The coordinates are provided in a tuple, for example:
        p = (8, 11) 
    The first value represents the x coordinate, while the second value represents the y coordinate of the point p.
    Complete the provided code to calculate and output the distance between the two given points.
    The linear distance is the square root of the square of the horizontal distance plus the square of the vertical distance between two points.
    The math.sqrt() function can be used to calculate the square root.
        import math
        p1 = (23, -88)
        p2 = (6, 42)
        res = math.sqrt(((p1[0] - p2[0])**2) + ((p1[1] - p2[1])**2))
        print(res)
        
    List Slices
    Write a program that takes a list as input and outputs the last element of that list.
    The input list can be of any size.
    Remember, you can use negative indices to slice lists.
        x = input()
        elements = x.split()
        print(elements[-1])
        
    List Of Multiples
    Write a program to take a number as input, and output a list of all the numbers below that number, that are a multiple of both, 3 and 5.
    Sample Input
    42
    Sample Output
    [0, 15, 30]
    Use a list comprehension to generate the list of numbers that satisfy the condition.
        x = int(input())
        #your code goes here
        list = [i for i in range(x) if i % 15 == 0]
        print(list)
        
    Names And Ages
    The .format() method provides an easy way to format strings.
    Take as input a name and an age, and generate the output "name is age years old".
    Sample Input
    James
    42
    Sample Output
    James is 42 years old
    Recall, you can use braces to embed variable values into strings.
        name = input()
        age = int(input())
        #your code goes here
        print("{0} is {1} years old".format(name, age))

    Broken Keyboard
    Your friend sent you a message, however his keyboard is broken and types a # instead of a space.
    Replace all of the # characters with spaces and output the result.
    You can use the replace() method of a string to replace one substring with another.
        txt = input()
        print(txt.replace("#", " "))

    How Many Words?
    Given text as input, output the number of words it contains.
    Sample Input
    hello world
    Sample Output
    2
    The split() method can be used to split the string into words.
        txt = input()
        word = txt.split(" ")
        print(len(word))

    Longest Word (PROJECT)
    Given a text as input, find and output the longest word.
    Sample Input
    this is an awesome text
    Sample Output
    awesome
    Recall the split(' ') method, which returns a list of words of the string.
        txt = input().split()
        print(max(txt, key = len))
        
_____ Functional Programming _____

    Lambdas
    The given code takes a number as input and uses a lambda function to calculate its double and output the result.
    Change the code to calculate the cube of the input and output it.
    Sample Input
    3
    Sample Output
    27
    The cube of a number is its third power.
        x = int(input())
        y = (lambda z:z**3)(x)
        print(y)

    Filtering
    Given a list of names, output a list that contains only the names that consist of more than 5 characters.
    You can check the length of a string using the len() function and use the filter() function to define the condition.
        names = ["David", "John", "Annabelle", "Johnathan", "Veronica"]
        #your code goes here
        result = list(filter(lambda x:len(x) > 5, names))
        print(result)
        
    Split Generator
    Given a string as input, create a generator function that splits the string into separate words and outputs the resulting list.
    Sample Input
    This is some text
    Sample Output
    ['This', 'is', 'some', 'text']
    You can use the split() function to split the input string.
        txt = input()
        def words():
            #your code goes here
            for words in txt.split(" "):
                yield words
        print(list(words()))

    Uppercasing
    You are given code that takes input and prints it as a simple row of text.
    Add the uppercase_decorator to make the text uppercase.
    The upper() method can be used on strings to make them uppercase.
        text = input()
        def uppercase_decorator(func):
            def wrapper(text):
                #your code goes here
                return func(text).upper()
            return wrapper
        @uppercase_decorator    
        def display_text(text):
                return text
        print(display_text(text))

    Fun With Math
    The provided code uses recursion to calculate the sum of all items in the input list.
    Change the code to calculate and output the sum of the squares of all the list items.
    You can use **2 exponentiation to calculate the square of a number.
        def calc(list):
            if len(list)==0:
                return 0
            else:
                return list[0] **2+ calc(list[1:]) 

        list = [1, 3, 4, 2, 5]
        x = calc(list)        
        print(x)

    Commonality
    Sets are created using curly braces and they hold unique values.
    Given two sets, find and output all the elements that are common to both sets.
    For example, for the following sets:
    {'a', 'b', 'c'}
    {'c', 'd', 'e'}
    The output should be {'c'}, as it is present in both sets.
    The output should be a set, containing the common elements.
        set1 = {2, 4, 5, 6}    
        set2 = {4, 6, 7, 8, 11, 42, 2}    
        set3 = set1 & set2
        #your code goes here
        print(set3)

    Ordering
    You are given a list of items, and need to find all the possible orders of the items.
    The output should be a list, containing all possible orders.
    Sample Input
    ['a', 'b']
    Sample Output
    [('a', 'b'), ('b', 'a')]
    The itertools module contains many useful functions that can achieve the above mentioned task.
        from itertools import permutations
        items = ['x', 'y']
        result=list(permutations(items))
        #your code goes here
        print(result)
        
    Fibonacci (PROJECT)
    The Fibonacci sequence is one of the most famous formulas in mathematics.
    Each number in the sequence is the sum of the two numbers that precede it.
    For example, here is the Fibonacci sequence for 10 numbers, starting from 0: 0,1,1,2,3,5,8,13,21,34.
    Write a program to take N (variable num in code template) positive numbers as input, and recursively calculate and output the first N numbers of the Fibonacci sequence (starting from 0).
    Sample Input
    6
    Sample Output
    0
    1
    1
    2
    3
    5
    If you are making the Fibonacci sequence for n numbers, you should use n<=1 condition as the base case.
        num = int(input())
        def fibonacci(n):
            #complete the recursive function
            count = 0
            n1, n2 = 0, 1
            while count < n:
                print(n1)
                nth = n1 + n2
                n1 = n2
                n2 = nth
                count += 1
        fibonacci(num)

_____ OOP _____

    Student Class
    The provided code defines a Student class, creates a Student object, and calls its greet() method.
    However, the code has an error and does not run.
    Fix the code to produce the expected output.
    Hint: All methods need to have self as their first parameter.
        class Student:
            def __init__(self, name):
                self.name = name
            
            def greet(self):
                print(self.name+" says hi")
        obj = Student("John")
        obj.greet()
        
    Fun With Classes
    Complete the provided code to inherit the Car class from the Vehicle class, create a Car object and call its horn() method, which is inherited from the Vehicle superclass.
        class Vehicle: 
            def horn(self):
                print("Beep!")
        class Car:
            def __init__(self, name, color):
                self.name = name
                self.color = color
        obj = Car("BMW", "red") 
    Inheritance allows one class to derive or inherit the properties from another class.
        class Vehicle: 
            def horn(self):
                print("Beep!")
        class Car(Vehicle):
            def __init__(self, name, color):
                self.name = name
                self.color = color
        obj = Car("BMW", "red")
        obj.horn()

    Bank Accounts
    The __add__ method allows for the definition of a custom behavior for the + operator in our class.
    The provided code is trying to add together two BankAccount objects, which should result in a new object with the sum of the balances of the given accounts.
    Fix the code to make it work as expected and output the resulting account balance.
    The __add__ method needs to take 2 parameters, which represents the objects you are adding.
        class BankAccount:
            def __init__(self, balance):
                self.balance = balance
            def __add__(self, other):
                return BankAccount(self.balance + other.balance)
        a = BankAccount(1024)
        b = BankAccount(42)
        result = a + b
        print(result.balance)

    Making A Deposit
    You are given a BankAccount class and need to add a deposit() method to it, which adds the given amount to the private balance property.
    The code should declare a BankAccount object with an initial balance of 0, take a number from user input, add it to the balance using the deposit() method, and output the object.
    Complete the required deposit() method so the code works as expected and produces the required output.
    Remember, the methods in a class need to have self as their first parameter, which is used to access the properties.
        class BankAccount:
            def __init__(self, balance):
                self._balance = balance
            def __repr__(self):
                 return "Account Balance: {}".format(self._balance)
            def deposit(self, amount):
                #your code goes here
                self._balance += amount
        acc = BankAccount(0)
        acc.deposit(int(input()))
        print(acc)
        
    Static Methods
    Complete the given code to define a static add() method for the Calculator class, which returns the sum of its parameters.
    The code takes two numbers as input, and should return their sum using the Calculator class's add() method.
    Static methods can be called without creating an object of the class.
        class Calculator:
            #your code goes here
            @staticmethod
            def add(a,b):
                return a+ b
        n1 = int(input())
        n2 = int(input())
        print(Calculator.add(n1, n2))

    Property Values
    Complete the provided code by creating an isEven property, which returns True if the value is even, and False if the value is odd.
        class Number:
            def __init__(self, num):
                self.value = num
        x = Number(int(input()))
        print(x.isEven) 
    Use the modulo operator % to check if the value is even or odd. The value is even if the remainder of dividing it by 2 is 0.
        class Number:
            def __init__(self, num):
                self.value = num
            @property
            def isEven(self):
                if self.value % 2 == 0:
                    return True
                else:
                    return False
            #your code goes here
        x = Number(int(input()))
        print(x.isEven)
        
    Juice Maker (PROJECT)
    You are given a Juice class, which has name and capacity properties.
    You need to complete the code to enable and adding of two Juice objects, resulting in a new Juice object with the combined capacity and names of the two juices being added.
    For example, if you add an Orange juice with 1.0 capacity and an Apple juice with 2.5 capacity, the resulting juice should have:
    name: Orange&Apple
    capacity: 3.5
    The names have been combined using an & symbol.
    Use the __add__ method to define a custom behavior for the + operator and return the resulting object.
        class Juice:
            def __init__(self, name, capacity):
                self.name = name
                self.capacity = capacity
            def __str__(self):
                return (self.name + ' ('+str(self.capacity)+'L)')
            def __add__(self,other):
                new_name = self.name + "&" + other.name
                new_capacity = self.capacity + other.capacity
                return Juice(new_name, new_capacity)
        a = Juice('Orange', 1.5)
        b = Juice('Apple', 2.0)
        result = a + b
        print(result)
        
_____ Regular Expressions _____

    Contacts Database
    We need to create a number formatting system for a contacts database.
    Create a program that will take the phone number as input, and if the number starts with "00", replace them with "+".
    The number should be printed after formatting.
    Sample Input
    0014860098
    Sample Output
    +14860098
        import re
        #your code goes here
        num = input()
        num = re.sub(r"^00","+",num)
        print(num)

    Start With Ends With
    Write a program that takes a word as input, and outputs "Match" if the word has 4 letters, starts with "m" and ends with "e".
    The program should output "No match" if these mentioned requirements aren't satisfied.
    Sample Input
    mine
    Sample Output
    Match
    Don't forget to mention the start and end of the regular expression.
        import re
        word = input()
        #your code goes here
        pattern = r"m..e"
        if re.match(pattern, word):
            print("Match")
        else:
            print("No match")
            
    Online Shop Search
    All the products in online shop have their own ID. Every ID consists of 4 symbols:
    The first symbol: an uppercase character
    The second symbol: an uppercase character
    The third symbol: a digit
    The forth symbol: a digit
    Write a program for a search tool, that will take the ID as input and output "Searching" if the format is correct, and "Wrong format", if it's not.
    Sample Input
    LG17
    Sample Output
    Searching
    Remember to use $ sign in pattern to set the ending of the ID string.
        import re
        id = input()
        #your code goes here
        if re.search(r"[A-Z][A-Z][0-9][0-9]$", id):
            print("Searching")
        else:
            print("Wrong format")
            
    Authentication!
    Let's imagine we are creating our own authentication system.
    Create a program that takes a password as input and returns "Password created" if
    - it has at least one uppercase character
    - it has at least one number
    The Program should output "Wrong format" if requirements above are not met.
    Sample Input
    Hal44gb8
    Sample Output
    Password created
    Use metacharacter * that means zero or more repetitions.
        import re
        password = input()
        pattern = r"\w*[A-Z]\w*[0-9]\w*"
        #your code goes here
        if re.match(pattern, password):
            print("Password created")
        else:
            print("Wrong format")

    Social Media Pro
    You are a social media marketing specialist doing research on social networks.
    Write a program for your research that will take text as input and output all of the hashtags in it separately.
    Sample Input
    No #pressure, no #diamonds
    Sample Output
    #pressure
    #diamonds
    Remember that the re.findall() method returns a list of all substrings that match a pattern. So, you can use the regex r"#\w+" to find all words that start with a hashtag and output them on separate lines.
        import re
        text = input()
        #your code goes here
        #use re.findall() with r"#\w+" as the regex
        pattern = r'#\w+'
        search = re.findall(pattern,text)
        result = '\n'.join(search) #joins results with a newline
        print(result)
        
    Phone Number Validator (PROJECT)
    You are given a number input, and need to check if it is a valid phone number.
    A valid phone number has exactly 8 digits and starts with 1, 8 or 9.
    Output "Valid" if the number is valid and "Invalid", if it is not.
    Sample Input
    81239870
    Sample Output
    Valid
    You can use a regular expression to check if the input matches the given pattern.
        import re
        #your code goes here
        pattern = r"^[189][0-9]{7}$"
        if re.match(pattern, input()):
            print("Valid")
        else:
            print("Invalid")

_____ Pythonicness & Packaging _____

    Infinite Sum
    Given a function that takes 2 arguments and returns their sum.
    But we get an error when we want to sum more than 2 numbers. Change the function and complete the code so that the function sums as many numbers as are input.
    *args are accessible as the tuple args in the body of the function, so you can iterate through its items.
        #change the function
        def adder(x, *args):
            print(x+sum(args))
        adder(2, 3)
        adder(2, 3, 4)
        adder(1, 2, 3, 4, 5)
        
    Give Me My Money
    You are given a program for a bank card withdrawal system: it takes the account and the amount that the user wants to withdraw, then outputs the remaining money. If the requested cash is greater than the balance, the program outputs "Error".
    The bank wants to set a minimal value of $500 for withdrawal. Modernize the program so that it will output the same "Error" if the requested money is less than $500.
    Sample Input
    4500
    300
    Sample Output
    Error
    As with other operators, you can chain multiple conditions with the ternary operator.
        balance = int(input())
        to_cash = int(input())
        #change the code
        money_left = balance-to_cash if to_cash<=balance and to_cash>=500 else "Error"
        print(money_left)
        
    Too Young To Ride
    The carousel is designed for 3 people who are each at least 16 years old.
    You are given a program that takes all 3 passengers' ages as inputs and inserts them in a list. Complete the program so that if it finds a value less than 16, it breaks the loop and outputs "Too young!".
    If the age requirement is satisfied, the program outputs "Get ready!".
    Sample Input
    18
    26
    19
    Sample Output
    Get ready!
    With the while loop, the code within the else block is called if the loop finishes normally, so that's where you need to output the "Get ready!" message.
        ages = []
        i = 0
        while i<3:
            age = int(input())
            ages.append(age)
            if min(ages) < 16:
                print("Too young!")
                break
            i+=1
        else:
            print("Get ready!")

    Adding Word (PROJECT)
    You need to write a function that takes multiple words as its argument and returns a concatenated version of those words separated by dashes (-).
    The function should be able to take a varying number of words as the argument.
    Sample Input
    this
    is
    great
    Sample Output
    this-is-great
    Recall, using *args as a function parameter enables you to pass an arbitrary number of arguments to that function.
        def concatenate(*args):
            return '-'.join(args)
        print(concatenate("I", "love", "Python", "!"))