===== PYTHON FOR BEGINNERS (https://www.sololearn.com/certificates/CT-EITFW4KN) =====
_____ Basic Concepts _____

    Goal!
    You need to calculate the points earned by a soccer team.
    The team won 18 games and ended 7 games as a draw.
    A win brings 3 points, while a draw brings 1.
    Create a program to calculate and output the total points earned by the team.
        print(3*18+7)

    Do The Math
    Write a program that will multiply the sum of 5 and 6 by 57.3 and output the result.
    Remember that you can use parentheses to specify the order of operations.
        print((5 + 6) * 57.3)

    Exponentiation
    Write code to output 4 raised to the 5th power.
    Output the result using the print() statement.
        print(4**5)

    Flight Time (PROJECT)
    You need to calculate the flight time of an upcoming trip. You are flying from LA to Sydney, covering a distance of 7425 miles, the plane flies at an average speed of 550 miles an hour.
    Calculate and output the total flight time in hours.
    Hint
    The result should be a float.
    Use the print statement to output the result.
        distance = 7425
        speed = 550
        flight_time = float(distance / speed)
        print(flight_time)

_____ Strings _____

    Output The String
    You are given a code that should output a string with quotes.
    However, it contains errors.
    Task
    Fix the given code to generate the expected output.
    Remember, you need to escape the quotes in the strings to fix the errors in the code.
        print('I\'m learning Python. It\'s easy.')

    New Lines
    Write a program to output the letters A B C D, each on a separate line.
    You can use 3 quotes to add the new lines.
        print("""A
        B
        C
        D""")

    Hey There
    You’re given a task to write the word "hi" 42 times. Boring, right?
    Write a program to do it for you.
    Create a program to output "hi" 42 times, without any separators, on the same line.
    Remember, you can multiply strings by numbers.
        print("hi"*42)

    Leaderboard (PROJECT)
    You need to make a program for a leaderboard.
    The program needs to output the numbers 1 to 9, each on a separate line, followed by a dot:
    1.
    2.
    3.
    ...
    You can use the \n newline character to create line breaks, or, alternatively, create the desired output using three double quotes """.
        print("""1.
        2.
        3.
        4.
        5.
        6.
        7.
        8.
        9.""")

_____ Variables _____

    Value of The Variable
    The provided code stores the value 7 in a variable, and outputs it.
    Change the code to output the value of the variable raised to the power of 3.
        num = 7
        num = num ** 3
        print(num)

    Desired Output
    Somebody wrote code to take a string input and output it, repeated 10 times.
    However, the code results in an error.
    Fix the code to output the desired output.
        x = input()
        print(x*10)

    Convert The Input
    Write a program to take x and y as input and output the string x, repeated y times.
    Sample Input
    hi
    3
    Sample Output
    hihihi
    Remember to convert the input to the required data type.
        x = input()
        y = int(input())
        print(x * y)

    Tip Calculator (PROJECT)
    When you go out to eat, you always tip 20% of the bill amount. But who’s got the time to calculate the right tip amount every time? Not you that’s for sure! You’re making a program to calculate tips and save some time.
    Your program needs to take the bill amount as input and output the tip as a float.
    Sample Input
    50
    Sample Output
    10.0
    Explanation: 20% of 50 is 10.
    To calculate 20% of a given amount, you can multiply the number by 20 and divide it by 100: 50*20/100 = 10.0
        bill = int(input())
        bill = bill*.2
        print(bill)

_____ Control Flow _____

    At The Boiling Point
    Write a program that checks if the water is boiling.
    Take the integer temperature in Celsius as input and output "Boiling" if the temperature is above or equal to 100.
    Sample Input
    105
    Sample Output
    Boiling
    Do not output anything if the water is not boiling.
        temp = int(input())
        if temp > 99:
            print("Boiling")

    Face Control
    Write a program to control entrance to a club.
    Only people who are 18 or older are allowed to enter the club.
    Your program takes the age of the person who tries to enter, and outputs "Allowed" if they are allowed to enter the club, and "Sorry" if they are younger than the allowed age.
    Sample Input
    24
    Sample Output
    Allowed
        age = int(input())
        if age > 17:
         print("Allowed")
        else:
         print("Sorry")

    Age Groups
    Given the age of a person as an input, output their age group.
    Here are the age groups you need to handle:
    Child: 0 to 11
    Teen: 12 to 17
    Adult: 18 to 64
    Sample Input
    42
    Sample Output
    Adult
    Remember, you can use the Boolean and operator to combine conditions, like x>0 and x<20.
        age = int(input())
        if age <= 11:
            print("Child")
        elif age <= 17:
            print("Teen")
        else:
            print("Adult")

    Call It Even
    You are given a program that outputs all the numbers from 0 to 10.
    Change the code to make it output only the even numbers.
    Any integer that can be divided exactly by 2 is an even number.
        x = 0
        while x<=10:
            if x%2==0:
                print(x)
            x+=1

    Ticket Prices
    You are making a ticketing system.
    The price of a single ticket is $100.
    For children under 3 years of age, the ticket is free.
    Your program needs to take the ages of 5 passengers as input and output the total price for their tickets.
    Sample Input
    18
    24
    2
    5
    42
    Sample Output
    400
    There is one child under 3 among the passengers, so the total price of 5 tickets is $400.
        total = 0
        #your code goes here
        i = 1
        while i <= 5:
            age = int(input())
            if age > 3:
                total = total + 100
            i += 1
        print(total)

    BMI Calculator (PROJECT)
    Tracking your BMI is a useful way of checking if you’re maintaining a healthy weight. It’s calculated using a person's weight and height, using this formula: weight / height²
    The resulting number indicates one of the following categories:
    Underweight = less than 18.5
    Normal = more or equal to 18.5 and less than 25
    Overweight = more or equal to 25 and less than 30
    Obesity = 30 or more
    Let’s make finding out your BMI quicker and easier, by creating a program that takes a person's weight and height as input and outputs the corresponding BMI category.
    Sample Input
    85
    1.9
    Sample Output
    Normal
    Weight is in kg, height is in meters.
    Note, that height is a float.
        weight = int(input())
        height = float(input())
        bmi = weight / height**2
        if bmi < 18.5:
            print("Underweight")
        elif bmi < 25:
            print("Normal")
        elif bmi < 30:
            print("Overweight")
        else:
            print("Obesity")

_____ Lists _____

    Strings
    Write a program that takes an input string and outputs the 3rd character of the string.
        word = input()
        print(word[2])

    Bingo
    Given a list of numbers, output "bingo" if it contains the input number.
    Do not output anything if the number is not found.
        x = [42, 8, 7, 1, 0, 124, 8897, 555, 3, 67, 99]
        num = int(input())
        if num in x:
            print("bingo")

    List of Numbers
    for loops allow you to easily iterate through lists.
    Given a list of numbers, calculate their sum using a for loop.
    Output the sum after the loop.
        x = [42, 8, 7, 1, 0, 124, 8897, 555, 3, 67, 99]
        total = 0
        for z in x:
            total += z
        print(total)

    Date Picker
    You are creating a date picker for a website and need to output all of the years in a given period.
    Write a program that takes two integers as input and outputs the range of numbers between the two inputs as a list.
    The output sequence should start with the first input number and end with the second input number, without including it.
    Sample Input
    2005
    2011
    Sample Output
    [2005, 2006, 2007, 2008, 2009, 2010]
    Convert a range object to a list and output it.
        a = int(input())
        b = int(input())
        dates = list(range(a,b))
        print(dates)

    The Last Character
    Write a program that takes a string as input and outputs the last character of that string.
    Remember, you can use negative indices to index lists.
        word =input()
        print(word[-1])

    Sum of Consecutive Numbers (PROJECT)
    No one likes homework, but your math teacher has given you an assignment to find the sum of the first N numbers.
    Let’s save some time by creating a program to do the calculation for you!
    Take a number N as input and output the sum of all numbers from 1 to N (including N).
    Sample Input
    100
    Sample Output
    5050
    Explanation: The sum of all numbers from 1 to 100 is equal to 5050.
    You can iterate over a range and calculate the sum of all numbers in the range.
    Remember, range(a, b) does not include b, thus you need to use b+1 to include b in the range.
        n = int(input())
        total = 0
        #your code goes here
        for x in range(n+1):
            total = total + x
        print(total)

_____ Functions _____

    Queue Management
    You are working on a queue management program.
    The queue is represented by a list.
    Write a program to take an input, add it to the end of the queue, and output the resulting list.
    The append() method can be used to add new items to the list.
        queue = ['John', 'Amy', 'Bob', 'Adam']
        queue.append(input())
        print(queue)

    Broken Keyboard
    Your friend sent you a message, however his keyboard is broken and types a # instead of a space.
    Replace all of the # characters in the given input with spaces and output the result.
    You can use the replace() function of a string to replace one substring with another.
        msg = input()
        print(msg.replace('#', ' '))

    Welcome, Sololearner!
    We have a function that outputs "Welcome, user" as it is called. We want to make it more personalized, so redesign the given function so that it will take the name of the user as input and output the welcome message with it.
    Sample Input
    Tommy
    Sample Output
    Welcome, Tommy
    Don't forget to indent the statement in the function.
        def welcome():
            name = input()
            print("Welcome, " + name)
        welcome()

    Call The Function
    The given program defines a function printBill(), which takes one string argument and outputs formatted text.
    You need to take the user input and call the function by passing the input as its argument.
    You need to only call the function, as it will take care of the output.
        def printBill(text):
            print("======")
            print(text)
            print("======")
        printBill(input())

    Area of a Rectangle
    We need to calculate the area of a given rectangle.
    Your program needs to take the width and length as input and output the area of the rectangle.
    Complete the area function, which takes the length and width as arguments, to calculate and return the area.
    Then call the function for the given inputs.
    Sample Input 1
    7
    4
    Sample Output 1
    28
    To find the area of a rectangle, multiply the length by the width.
        def area(x, y):
            #your code goes here
            return x * y
        w = int(input())
        h = int(input())
        #call the function
        print(area(w, h))

    Search Engine (PROJECT)
    You’re working on a search engine. Watch your back Google!
    The given code takes a text and a word as input and passes them to a function called search().
    The search() function should return "Word found" if the word is present in the text, or "Word not found", if it’s not.
    Sample Input
    "This is awesome"
    "awesome"
    Sample Output
    Word found
    Define the search() function, so that the given code works as expected.
        text = input()
        word = input()
        def search(text, word):
            if(word in text):
                return "Word found"
            else:
                return "Word not found"
        print(search(text, word))


===== INTERMEDIATE PYTHON (https://www.sololearn.com/certificates/CT-VJVYIMOO) =====
_____ Collection Types _____

    Car Data
    You are working at a car dealership and store the car data in a dictionary:
    car = {
        'brand': 'BMW',
        'year': 2018,
        'color': 'red'
    }
    Your program needs to take the key as input and output the corresponding value.
    Sample Input
    year
    Sample Output
    2018
    The data is already defined in the code.
        car = {
            'brand':'BMW',
            'year': 2018,
            'color': 'red',
            'mileage': 15000
        }
        print(car[input()])

    National Economic Freedom
    You are working on data that represents the economic freedom rank by country.
    Each country name and rank are stored in a dictionary, with the key being the country name.
    Complete the program to take the country name as input and output its corresponding economic freedom rank.
    In case the provided country name is not present in the data, output "Not found".
    Recall the get() method of a dictionary, that allows you to specify a default value.
        data = {
            'Singapore': 1,
            'Ireland': 6,
            'United Kingdom': 7,
            'Germany': 27,
            'Armenia': 34,
            'United States': 17,
            'Canada': 9,
            'Italy': 74
        }
        print(data.get(input(), "Not found"))

    Contact Search
    You are given a list of contacts, where each contact is represented by a tuple, with the name and age of the contact.
    Complete the program to get a string as input, search for the name in the list of contacts and output the age of the contact in the format presented below:
    Sample Input
    John
    Sample Output
    John is 31
    If the contact is not found, the program should output "Not Found".
        contacts = [
            ('James', 42),
            ('Amy', 24),
            ('John', 31),
            ('Amanda', 63),
            ('Bob', 18)
        ]
        name = input()
        for x in contacts:
            if name in x:
                print(str(x[0]) + " is " + str(x[1]))
                break
        else:
            print("Not found")

    Square Up
    Tuples can be used to output multiple values from a function.
    You need to make a function called calc(), that will take the side length of a square as its argument and return the perimeter and area using a tuple.
    The perimeter is the sum of all sides, while the area is the square of the side length.
    Sample Input
    3
    Sample Output
    Perimeter: 12
    Area: 9
    The given code takes a number from user input, passes it to the calc() function, and uses unpacking to get the returned values.
        def calc(x):
            #your code goes here
            return x * 4, x ** 2
        side = int(input())
        p, a = calc(side)
        print("Perimeter: " + str(p))
        print("Area: " + str(a))

    You Are Qualified!
    You are working on a recruitment platform, which should match the available jobs and the candidates based on their skills.
    The skills required for the job, and the candidate's skills are stored in sets.
    Complete the program to output the matched skill.
    You can use the intersect operator to get the values present in both sets.
        skills = {'Python', 'HTML', 'SQL', 'C++', 'Java', 'Scala'}
        job_skills = {'HTML', 'CSS', 'JS', 'C#', 'NodeJS'}
        print(list(skills & job_skills)[0])

    Ignore The Vowels
    Given a word as input, output a list, containing only the letters of the word that are not vowels.
    The vowels are a, e, i, o, u.
    Sample Input
    awesome
    Sample Output
    ['w', 's', 'm']
    Use a list comprehension to create the required list of letters and output it.
        word = input()
        vowels = ['a', 'e', 'i', 'o', 'u']
        a = [i for i in word if i not in vowels]
        print(a)

    Letter Counter (PROJECT)
    Given a string as input, you need to output how many times each letter appears in the string.
    You decide to store the data in a dictionary, with the letters as the keys, and the corresponding counts as the values.
    Create a program to take a string as input and output a dictionary, which represents the letter count.
    Sample Input
    hello
    Sample Output
    {'h': 1, 'e': 1, 'l': 2, 'o': 1}
    You need to output the dictionary object.
    Note, that the letters are in the order of appearance in the string.
        text = input()
        dict = {}
        #your code goes here
        for i in text:
            dict[i]= text.count(i)
        print(dict)

 _____ Functional Programming _____

    How Much?
    You are given code that should calculate the corresponding percentage of a price.
    Somebody wrote a lambda function to accomplish that, however the lambda is wrong.
    Fix the code to output the given percentage of the price.
    Sample Input
    50
    10
    Sample Output
    5.0
    The first input is the price, while the second input is the percentage we need to calculate: 10% of 50 is 5.0.
        price = int(input())
        perc = int(input())
        res = (lambda x,y:x*y/100)(price, perc)
        print(res)

    Getting A Raise
    You work on a payroll program.
    Given a list of salaries, you need to take the bonus everybody is getting as input and increase all the salaries by that amount.
    Output the resulting list.
    You can use the map() function to increase all the values of the list.
        salaries = [2000, 1800, 3100, 4400, 1500]
        bonus = int(input())
        def add_things(x):
            return x + bonus
        result = list(map(add_things,salaries))
        print(result)

    Generating
    Finding prime numbers is a common coding interview task.
    The given code defines a function isPrime(x), which returns True if x is prime.
    You need to create a generator function primeGenerator(), that will take two numbers as arguments, and use the isPrime() function to output the prime numbers in the given range (between the two arguments).
    Sample Input
    10
    20
    Sample Output
    [11, 13, 17, 19]
    The given code takes the two arguments as input and passes them to the generator function, outputting the result as a list.
        def isPrime(x):
            if x < 2:
                return False
            elif x == 2:
                return True
            for n in range(2, x):
                if x % n ==0:
                    return False
            return True
        def primeGenerator(a, b):
            #your code goes here
            for number in range(a,b):
                if isPrime(number):
                    yield number
        f = int(input())
        t = int(input())
        print(list(primeGenerator(f, t)))

    Collecting Reports
    You are working on an invoicing system.
    The system has an already defined invoice() function, which takes the invoice number as argument and outputs it.
    You need to add a decorator for the invoice() function, that will print the invoice in the following format:
    Sample Input
    42
    Sample Output
    ***
    INVOICE #42
    ***
    END OF PAGE
    The given code takes the invoice number as input and passes it to the invoice() function.
        def decor(func):
            def wrap(num):
                print("***")
                func(num)
                print("***")
                print("END OF PAGE")
            return wrap
        @decor
        def invoice(num):
            print("INVOICE #" +num)
        invoice(input());

    Decimal to Binary
    The given code defines a recursive function convert(), which needs to convert its argument from decimal to binary.
    However, the code has an error.
    Fix the code by adding the base case for the recursion, then take a number from user input and call the convert() function, to output the result.
    Sample Input
    8
    Sample Output
    1000
    The binary representation of 8 is 1000.
        def convert(num):
            if num == 0:
                return 0
            return (num % 2 + 10 * convert(num // 2))
        a = int(input())
        print(convert(a))

    Making It Work
    The given code defined a function called my_min(), which takes two arguments and returns the smaller one.
    You need to improve the function, so that it can take any number of variables, so that the function call works.
    Remember, *args can be accessed inside the function as a tuple.
        def my_min(*args):
            return min(args)
            print(my_min(8, 13, 4, 42, 120, 7))

    Spelling Backwards (PROJECT)
    Spelling Backwards
    Given a string as input, use recursion to output each letter of the strings in reverse order, on a new line.
    Sample Input
    HELLO
    Sample Output
    O
    L
    L
    E
    H
    Complete the recursive spell() function to produce the expected result.
        def spell(txt):
            #your code goes here
            print(txt[::-1])
            txt = input()
            spell(txt)

_____ OOP _____

    Game Over
    You are making a video game! The given code declares a Player class, with its attributes and an intro() method.
    Complete the code to take the name and level from user input, create a Player object with the corresponding values and call the intro() method of that object.
    Sample Input
    Tony
    12
    Sample Output
    Tony (Level 12)
    Use the dot syntax to call the intro() method for the declared object.
        class Player:
            def __init__(self, name, level):
                self.name = name
                self.level = level
            def intro(self):
                print(self.name + " (Level " + self.level + ")")
        #your code goes here
        name = input()
        level = input()
        p = Player(name,level)
        p.intro()

    Fine Art
    You are making a drawing application, which has a Shape base class.
    The given code defines a Rectangle class, creates a Rectangle object and calls its area() and perimeter() methods.
    Do the following to complete the program:
    1. Inherit the Rectangle class from Shape.
    2. Define the perimeter() method in the Rectangle class, printing the perimeter of the rectangle.
    The perimeter is equal to 2*(width+height)
        class Shape:
            def __init__(self, w, h):
                self.width = w
                self.height = h
            def area(self):
                print(self.width*self.height)
        class Rectangle(Shape):
            #your code goes here
            def perimeter(self):
                print(2*(self.width + self.height))
        w = int(input())
        h = int(input())
        r = Rectangle(w, h)
        r.area()
        r.perimeter()

Shape Factory
    We are improving our drawing application.
    Our application needs to support adding and comparing two Shape objects.
    Add the corresponding methods to enable addition + and comparison using the greater than > operator for the Shape class.
    The addition should return a new object with the sum of the widths and heights of the operands, while the comparison should return the result of comparing the areas of the objects.
    The given code creates two Shape objects from user input, outputs the area() of their addition and compares them.
    class Shape:
        def __init__(self, w, h):
            self.width = w
            self.height = h
        def area(self):
            return self.width*self.height
        #your code goes here
        def __add__(self, other):
            return Shape(self.width + other.width, self.height + other.height)
        def __gt__(self, other):
            return self.area() > other.area()
    w1 = int(input())
    h1 = int(input())
    w2 = int(input())
    h2 = int(input())
    s1 = Shape(w1, h1)
    s2 = Shape(w2, h2)
    result = s1 + s2
    print(result.area())
    print(s1 > s2)

    Preservation
    We are working on a game. Our Player class has name and private _lives attributes.
    The hit() method should decrease the lives of the player by 1. In case the lives equal to 0, it should output "Game Over".
    Complete the hit() method to make the program work as expected.
    The code creates a Player object and calls its hit() method multiple times.
        class Player:
            def __init__(self, name, lives):
                self.name = name
                self._lives = lives
            def hit(self):
                #your code goes here
                self._lives -= 1
                if self._lives == 0:
                    print("Game Over")
        p = Player("Cyberpunk77", 3)
        p.hit()
        p.hit()
        p.hit()

    Define The Methods
    The given code takes 2 numbers as input and calls the static area() method of the Shape class, to output the area of the shape, which is equal to the height multiplied by the width.
    To make the code work, you need to define the Shape class, and the static area() method, which should return the multiplication of its two arguments.
        class Shape:
            def __init__(self, w, h):
                self.w2 = w
                self.h2 = h
            @staticmethod
            def area(w2, h2):
                return w2 * h2
        width = int(input("Enter a width: "))
        height = int(input("Enter a height: "))
        print(Shape.area(width, height))

    Staying Alive
    We are improving our game and need to add an isAlive property, which returns True if the lives count is greater than 0.
    Complete the code by adding the isAlive property.
    The code uses a while loop to hit the Player, until its lives count becomes 0, using the isAlive property to make the condition.
        class Player:
            def __init__(self, name, lives):
                self.name = name
                self._lives = lives
            def hit(self):
                self._lives -= 1
            #your code goes here
            @property
            def isAlive(self):
                if self._lives > 0:
                    return True
        p = Player("Cyberpunk77", int(input()))
        i = 1
        while True:
            p.hit()
            print("Hit # " + str(i))
            i += 1
            if not p.isAlive:
                print("Game Over")
                break

    Shooting Game (PROJECT)
    You are creating a shooting game!
    The game has two types of enemies, aliens and monsters. You shoot the aliens using your laser, and monsters using your gun.
    Each hit decreases the lives of the enemies by 1.
    The given code declares a generic Enemy class, as well as the Alien and Monster classes, with their corresponding lives count.
    It also defines the hit() method for the Enemy class.
    You need to do the following to complete the program:
    1. Inherit the Alien and Monster classes from the Enemy class.
    2. Complete the while loop that continuously takes the weapon of choice from user input and call the corresponding object's hit() method.
    Sample Input
    laser
    laser
    gun
    exit
    Sample Output
    Alien has 4 lives
    Alien has 3 lives
    Monster has 2 lives
    The while loop stops when the user enters 'exit'.
        class Enemy:
            name = ""
            lives = 0
            def __init__(self, name, lives):
                self.name = name
                self.lives = lives
            def hit(self):
                self.lives -= 1
                if self.lives <= 0:
                    print(self.name + ' killed')
                else:
                    print(self.name + ' has '+ str(self.lives) + ' lives')
        class Monster(Enemy):
            def __init__(self):
                super().__init__('Monster', 3)
            def hit(self):
                super().hit()
        class Alien(Enemy):
            def __init__(self):
                super().__init__('Alien', 5)
            def hit(self):
                super().hit()
        m = Monster()
        a = Alien()
        while True:
            x = input()
            if x == 'exit':
                break
            elif x == 'laser':
                a.hit()
            elif x == 'gun':
                m.hit()

_____ Exceptions _____

    Cash Out
    An ATM machine takes the amount to be withdrawn as input and calls the corresponding withdrawal method.
    In case the input is not a number, the machine should output "Please enter a number".
    Use exception handling to take a number as input, call the withdraw() method with the input as its argument, and output "Please enter a number", in case the input is not a number.
    A ValueError is raised when you try to convert a non-integer to an integer using int().
        def withdraw(amount):
            print(str(amount) + " withdrawn!")
        #your code goes here
        n = input()
        try:
            int(n)
            withdraw(n)
        except:
            print("Please enter a number")

Chef's Kiss
    You are making a digital menu to order food.
    The menu is stored as a list of items.
    Your program needs to take the index of the item as input and output the item name.
    In case the index is not valid, you should output "Item not found".
    In case the index is valid and the item name is output successfully, you should output "Thanks for your order".
    Sample Input
    2
    Sample Output
    Cheeseburger
    Thanks for your order
    Handle the cases when the input is out of range, as well as when it is not a number.
        menu = ['Fries', 'Sandwich', 'Cheeseburger', 'Coffee', 'Soda']
        #your code goes here
        try:
            n=int(input())
            print(menu[n])
            print("Thanks for your order")
        except:
            print("Item not found")

Chef's Kiss
    You are making a digital menu to order food.
    The menu is stored as a list of items.
    Your program needs to take the index of the item as input and output the item name.
    In case the index is not valid, you should output "Item not found".
    In case the index is valid and the item name is output successfully, you should output "Thanks for your order".
    Sample Input
    2
    Sample Output
    Cheeseburger
    Thanks for your order
    Handle the cases when the input is out of range, as well as when it is not a number.
        menu = ['Fries', 'Sandwich', 'Cheeseburger', 'Coffee', 'Soda']
        #your code goes here
        try:
            n=int(input())
            print(menu[n])
            print("Thanks for your order")
        except:
            print("Item not found")

    Say Something
    You are making a program to post tweets. Each tweet must not exceed 42 characters.
    Complete the program to raise an exception, in case the length of the tweet is more than 42 characters.
        tweet = input()
        try:
            #your code goes here
            if len(tweet) > 42:
                raise Exception
        except:
            print("Error")
        else:
            print("Posted")

    Registration System (PROJECT)
    You are making a registration form for a website.
    The form has a name field, which should be more than 3 characters long.
    Any name that has less than 4 characters is invalid.
    Complete the code to take the name as input, and raise an exception if the name is invalid, outputting "Invalid Name". Output "Account Created" if the name is valid.
    Sample Input
    abc
    Sample Output
    Invalid Name
    Use try/raise/except statements.
        try:
            name = input()
            if len(name) < 4:
                raise Exception("Invalid Name")
                except Exception as e:
            print(e)
            else:
                print("Account Created")

_____ Working With Files _____

    Reading Through
    You need to make a program to read the given number of characters of a file.
    Take a number N as input and output the first N characters of the books.txt file.
    The given code opens the books.txt file. Use the file object to read the content of the file.
        file = open("/usercode/files/books.txt")
        #your code goes here
        n = int(input())
        print(file.read(n))
        file.close()

    Filling Up With Numbers
    Take a number N as input and write the numbers 1 to N to the file "numbers.txt", each number on a separate line.
    Sample Input
    4
    Sample Output
    1
    2
    3
    4
    The given code reads the content of the file and outputs it.
    You can use \n to make line breaks.
    Do not forget to close the file after writing to it.
        n = int(input())
        file = open("numbers.txt", "w+")
        #your code goes here
        for i in range(1,n+1):
            file.write(str(i) + "")
        file.close()
        f = open("numbers.txt", "r")
        print(f.read())
        f.close()

    Book Club
    You are given a books.txt file, which includes book titles, each on a separate line.
    Create a program to output how many words each title contains, in the following format:
    Line 1: 3 words
    Line 2: 5 words
    ...
    Make sure to match the above mentioned format in the output.
    To count the number of words in a given string, you can use the split() function, or, alternatively, count the number of spaces (for example, if a string contains 2 spaces, then it contains 3 words).
        with open("/usercode/files/books.txt") as f:
            #your code goes here
            j = 1
            for line in f:
                print("Line " + str(j) + ": " + str(len(line.split(" "))) + " words")
                j+=1

    Title Encoder (PROJECT)
    You are given a file named "books.txt" with book titles, each on a separate line.
    To encode the book titles you need to take the first letters of each word in the title and combine them.
    For example, for the book title "Game of Thrones" the encoded version should be "GoT".
    Complete the program to read the book title from the file and output the encoded versions, each on a new line.
    You can use the .split() method to get a list of words in a string.
        file = open("/usercode/files/books.txt", "r")
        #your code goes here
        for x in file:
            title = x.split()
            for a in title:
                print(a[0],end="")
            print()
        file.close()

===== PYTHON DATA STRUCTURES (https://www.sololearn.com/certificates/CT-1OPQL4NI) =====
_____ Working With Strings _____

    How Many Vowels
    You need to make a program that counts the number of vowels in a given text.
    The vowels are a, e, i, o, and u.
    Take a string as input and output the number of vowels.
    Sample Input:
    this is great
    Sample Output:
    4
    There are 4 vowels in the given text.
        #your code goes here
        i = input()
        count = 0
        for w in i:
            if w=="a" or w=="e" or w=="i" or w=="o" or w=="u":
                count += 1
        print(count)

    Line Them Up
    Let's test your coding skills!
    Take a string as input and output each letter of the string on a new line, repeated N times, where N is the position of the letter in the string.
    Sample Input:
    data
    Sample Output:
    d
    aa
    ttt
    aaaa
    Hint: Use a loop to iterate over the string, keeping the position number of the current iteration in a variable. Then use multiplication to repeat the letters.
        #your code goes here
        word = input()
        print()
        i = 0
        while (i<len(word)):
            print(word[i]*(i+1))
            i+=1

    Editing Guide
    You are making a text editor and need to implement find/replace functionality.
    The code declares a text string. You need to take two string inputs, which represent the substring to find and what to replace it with in the text.
    Your program needs to output the number of replacements made, along with the new text.
    For example, for the given text "I weigh 80 kilograms. He weighs 65 kilograms.":
    Sample Input
    kilograms
    kg
    Sample Output
    2
    I weigh 80 kg. He weighs 65 kg.
    The program replaced 2 occurrences of the word kilograms with kg.
    Note, that you need to output the number of replacements, before the replaced text.
        text = "Amy has 128 dollars, while David has 54 dollars. Amy is going to the zoo. David watches soccer."
        a=input()
        b=input()
        print(text.count(a))
        print(text.replace(a,b))

    Letter Frequency (PROJECT)
    You are making a program to analyze text.
    Take the text as the first input and a letter as the second input, and output the frequency of that letter in the text as a whole percentage.
    Sample Input:
    hello
    l
    Sample Output:
    40
    Explanation : The letter l appears 2 times in the text hello, which has 5 letters. So, the frequency would be (2/5)*100 = 40.
    Division result is a float. Use the int() function to convert the result to an integer.
        #your code goes here
        string = input()
        letter = input()
        print(int(string.count(letter)/len(string)*100))

_____ Lists _____

    Apple of My Eye
    You are given a 2D matrix, which represents the number of people in a room, grouped by their eye color and gender.
    The first row represents the male gender, while the second row represents females.
    The columns are the eye colors, in the following order: brown, blue, green, black
    data = [
         [23, 11, 5, 14],
        [8, 32, 20, 5]
    ]
    The data shows that, for example, there are 20 green eyed females in the room (2nd row, 3rd column).
    Our program needs to take eye color as input and output the percentage of people with that eye color in the room.
    Sample Input:
    blue
    Sample Output:
    36
    Explanation: There are 11+32=43 people with blue eyes, which is 36% of the total.
    Note, that the output should be an integer: use the int() function to convert the result.
        data = [
    [23, 11, 5, 14],
    [8, 32, 20, 5]
    ]
        color = input()
        #your code goes here
        total = 118
        if color=="brown":
            print(int((data[0][0]+data[1][0])*100/total))
        elif color=="blue":
            print(int((data[0][1]+data[1][1])*100/total))
        elif color=="green":
            print(int((data[0][2]+data[1][2])*100/total))
        else:
            print(int((data[0][3]+data[1][3])*100/total))

    Fancy Houses
    You are analyzing house prices. The given code declares a list with house prices in the neighborhood.
    You need to calculate and output the number of houses that have a price that is above the average.
    To calculate the average price of the houses, you need to divide the sum of all prices by the number of houses.
    Use sum(list) to calculate the sum of all items in the list and len(list) to get the number of items.
        prices = [125000, 78000, 110000, 65000, 300000, 250000, 210000, 150000, 165000, 140000, 125000, 85000, 90000, 128000, 230000, 225000, 100000, 300000]
        #your code goes here
        avg = sum(prices)/len(prices)
        count = 0
        for i in prices:
            if i>avg:
                count += 1
        print(count)

    Insect Control
    The number of insects in a lab doubles in size every month.
    Take the initial number of insects as input and output a list, showing the number of insects for each of the next 12 months, starting with 0, which is the initial value.
    So, the resulting list should contain 12 items, each showing the number of insects at the beginning of that month.
    Sample Input:
    10
    Sample Output:
    [10, 20, 40, 80, 160, 320, 640, 1280, 2560, 5120, 10240, 20480]
    Create a list comprehension to generate the required list.
    The formula to calculate the number of insects after N months will be: count*2ᴺ, where count is the initial number of insects.
        n = int(input())
        insects = [n*2**i for i in range(12)]
        print(insects)

   Average Word Length (PROJECT)
    Given a sentence as input, calculate and output the average word length of that sentence.
    To calculate the average word length, you need to divide the sum of all word lengths by the number of words in the sentence.
    Sample Input:
    this is some text
    Sample Output:
    3.5
    Explanation: There are 4 words in the given input, with a total of 14 letters, so the average length will be: 14/4 = 3.5
    Strings have a split() method, which returns the string split into a list, with the given separator. By default, the separator is a space, so calling split() will return a list containing the words of the string as items.
        text = input()
        words = text.split()
        total = sum(map(len,words))/len(words)
        print(total)

_____Dictionaries, Tuples, Sets_____

    Fuzzy Search
    You are making a phonebook. The contacts are stored in a dictionary, where the key is the name and the value is a list, representing the number and the email of the contact.
    You need to implement search: take the name of the contact as input and output the email.
    If the contact is not found, output "Not found".
    Note, that the email is the second element of the list.
        contacts = {
            "David": ["123-321-88", "david@test.com"],
            "James": ["241-879-093", "james@test.com"],
            "Bob": ["987-004-322", "bob@test.com"],
            "Amy": ["340-999-213", "a@test.com"]
        }
        #your code goes here
        name = input()
        if name in contacts:
            print(contacts[name][1])
        else:
            print("Not found")

    Mapping Software
    You are working on a mapping software. The map is stored as a list of points, where each item is represented as a tuple, containing the X and Y coordinates of the point.
    You need to calculate and output the distance to the closest point from the point (0, 0).
    To calculate the distance of the point (x, y) from (0, 0), use the following formula: √x²+y²
    You can iterate over the list and use tuple unpacking to get the x and y coordinates of each point: for (x, y) in points: and output the smallest value.
        points = [
            (12, 55),
            (880, 123),
            (64, 64),
            (190, 1024),
            (77, 33),
            (42, 11),
            (0, 90)
        ]
        #your code goes here
        distance = list(range(len(points)))
        z = 0
        import math
        for (x,y) in points:
            distance[z] = math.sqrt((x**2)+(y**2))
            z += 1
        print(min(distance))

    Words In Common
    Given two sentences, you need to find and output the number of the common words (words that are present in both sentences).
    Sample Input:
    this is some text
    I would like this tea and some cookies
    Sample Output:
    2
    The words 'some' and 'this' appear in both sentences.
    You can use the split() function to get a list of words in a string and then use the set() function to convert it into a set. For example, to convert the list x to a set you can use: set(x)
        s1 = input()
        s2 = input()
        list1 = s1.split()
        list2 = s2.split()
        print(len(set(list1)&set(list2)))

    Revenue Growth Analysis (PROJECT)
    You are analyzing sales data from a ticket office.
    The ticket for an adult is $20, while the ticket for a child under 18 is $5.
    The data you are given is in a dictionary format, where the keys are the sold ticket numbers, and the values are the customer ages.
    For example, "123-08": 24 means that the ticket was bought a 24 year old.
    Your goal is to calculate how much more money the office would make if it would change the ticket discount age to the given input.
    So, your program needs to take an integer as input and output the percentage of revenue growth, if the discount was given to people under that age.
    For example, if the office made $15000 with the original discount age, and would make $18000 with 14 as the discount age, then the growth would be ((18000-15000)/15000)*100 = 20%
    So, for the input 14, your program should output 20. The output should be an integer (use int() to convert the result).
    To iterate over the values of a dictionary, you can use the .values() function:
    for value in data.values()
         data = {
            "100-90": 25, "42-01": 48, "55-09": 12, "128-64": 71, "002-22": 18, "321-54": 19, "097-32": 33, "065-135": 64, "99-043": 80, "111-99": 11, "123-019": 5, "109-890": 72, "132-123": 27, "32-908": 27, "008-09": 25, "055-967": 35, "897-99": 44, "890-98": 56, "344-32": 65, "43-955": 59, "001-233": 9, "089-111": 15, "090-090": 17, "56-777": 23, "44-909": 27, "13-111": 21, "87-432": 15, "87-433": 14, "87-434": 23, "87-435": 11, "87-436": 12, "87-437": 16, "94-121": 15, "94-122": 35, "80-089": 10, "87-456": 8, "87-430": 40
        }
        age = int(input())
        #your code goes here
        data_values = data.values()
        total = 0
        stotal = 0
        for x in data_values:
            if x >= 18:
                total += 20
            else:
                total += 5
        for y in data_values:
            if y >= age:
                stotal += 20
            else:
                stotal += 5
        res = ((stotal-total)/total)*100
        print(int(res))

_____ User-Defined Data Structures _____

    Come Back
    You need to make a back button for a browser.
    You use a stack to store the website links visited. Each new link visited is pushed onto the stack.
    The back button needs to pop the top link from the stack and navigate to it.
    The given code declares a Browser class as a stack and implements some of its methods. Then, some links are pushed onto the stack.
    A while loop is then used to go back to all links and print them.
    Implement the required pop() method for the Browser, so that the given code works as expected.
    Note, that the pop() method needs to return the value, so that it can be printed.
        class Browser:
            def __init__(self):
                self.links = []
                def is_empty(self):
                return self.links == []
            def push(self, link):
                self.links.insert(0, link)
            def pop(self):
                return self.links.pop(0)
        x = Browser()
        x.push('about:blank')
        x.push('www.sololearn.com')
        x.push('www.sololearn.com/courses/')
        x.push('www.sololearn.com/courses/python/')
        while not x.is_empty():
            print(x.pop())

    On A Call
    You are making a call center application, which should handle customers in a queue.
    The CallCenter class is implemented as a Queue. Each element of the queue has the topic of the call as its value. The two possible values are 'general' and 'technical'. A 'general' call takes on average 5 minutes to handle, while a 'technical' call requires 10 minutes.
    The given code adds multiple customers to the Queue from user input.
    You need to dequeue all added customers, calculate and output the total time required to handle all calls.
    Use a while loop to dequeue all the customers from the queue, until it is empty.
        class CallCenter:
            def __init__(self):
                self.customers = []
            def is_empty(self):
                return self.customers == []
            def add(self, x):
                self.customers.insert(0, x)
            def next(self):
                return self.customers.pop()
        c = CallCenter()
        while True:
            n = input()
            if n == 'end':
                break
            c.add(n)
        #your code goes here
        time = 0
        while True:
            if c.is_empty():
                break
            item = c.next()
            if item == 'general':
                time += 5
            if item == 'technical':
                time += 10
        print(time)

    Name That Tune
    You are making a Music Player, which allows you to create a playlist of tracks.
    The given code defines Player and Track classes, where the Player is a linked list, chaining together Track objects.
    The code takes a number of tracks from user input and adds them to the playlist.
    You need to iterate over the linked list and output all the tracks in the playlist in the order of playback.
    Use a while loop to iterate over the linked list.
        class Track:
            def __init__(self, title, next):
                self.title = title
                self.next = next
        class Player:
            def __init__(self):
                self.head = None
            def add(self, title):
                if not self.head:
                    self.head = Track(title, None)
                    return
                curr = self.head
                while curr.next:
                    curr = curr.next
                curr.next = Track(title, None)
        p = Player()
        while True:
            x = input()
            if x == 'end':
                break
            p.add(x)
        #your code goes here
        n = p.head
        while n != None:
            print(n.title)
            n = n.next
        print()

    Let's Connect
    You are making a social network called X.
    Connections between the users are stored as a graph.
    The given code declares an X class with its add_friend() method and creates some connections for 5 users.
    You need to take a number as input and output the number of connections of the corresponding user.
    Each user's connections are stored in the adj matrix.
            class X():
                def __init__(self, size):
                    self.adj = [ [0] * size for i in range(size)]
                    self.size = size
                def add_friend(self, x, y):
                    if x > self.size or y > self.size or x < 0 or y < 0:
                        print("Error")
                    else:
                        self.adj[x-1][y-1] = 1
                        self.adj[y-1][x-1] = 1
                def remove_friend(self, x, y):
                    if x > self.size or y > self.size or x < 0 or y < 0:
                        print("Error")
                    else:
                        self.adj[x-1][y-1] = 0
                        self.adj[y-1][x-1] = 0
            x = X(5)
            x.add_friend(1, 3)
            x.add_friend(1, 5)
            x.add_friend(2, 5)
            x.add_friend(2, 4)
            x.add_friend(4, 5)
            n = int(input())
            #your code goes here
            a = 0
            for i in range(len(x.adj)):
                if i+1 == n:
                    for j in x.adj[i]:
                        if j == 1:
                            a += 1
            print(a)

    Balanced Parentheses (PROJECT)
    Parentheses are balanced, if all opening parentheses have their corresponding closing parentheses.
    Given an expression as input, we need to find out whether the parentheses are balanced or not.
    For example, "(x+y)*(z-2*(6))" is balanced, while "7-(3(2*9))4) (1" is not balanced.
    The problem can be solved using a stack.
    Push each opening parenthesis to the stack and pop the last inserted opening parenthesis whenever a closing parenthesis is encountered.
    If the closing bracket does not correspond to the opening bracket, then stop and say that the brackets are not balanced.
    Also, after checking all the parentheses, we need to check the stack to be empty -- if it's not empty, then the parentheses are not balanced.
    Implement the balanced() function to return True if the parentheses in the given expression are balanced, and False if not.
    Sample Input:
    (a( ) eee) )
    Sample Output:
    False
    You can use a simple list for a stack. Use list.insert(0, item) to push on the stack, and list.pop(0) to pop the top item. You can access the top element of the stack using list[0].
        def balanced(expression):
            #your code goes here
            count = 0
            for char in expression:
                if char == "(":
                    count += 1
                elif char == ")":
                    if count == 0:
                        return False
                    count -= 1
            return count == 0
        print(balanced(input()))